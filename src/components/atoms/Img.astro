---
import { getImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';

import type { saiProps } from '@/types/CommonProps';

interface LayoutOptions {
  objectFit?: 'cover' | 'contain' | 'fill' | 'none' | 'scale-down';
  objectPosition?: string;
}
export interface Props {
  src: string | ImageMetadata;
  className?: string;
  loading?: 'lazy' | 'eager';
  alt: string;
  modifier?: string;
  sai?: saiProps;
  layout?: LayoutOptions;
}

const { src, className = 'image', loading = 'lazy', alt, modifier, sai, layout } = Astro.props;

let img: Awaited<ReturnType<typeof getImage>>;
let width: number;
let height: number;

if (typeof src === 'string') {
  img = await getImage({ src: src, format: 'webp' });
  width = img.options.width ?? 0;
  height = img.options.height ?? 0;
} else {
  img = await getImage({ src: src, format: 'webp' });
  width = src.width;
  height = src.height;
}
const objectFitStyle = layout?.objectFit !== 'none' ? `object-fit: ${layout?.objectFit};` : '';
const objectPositionStyle = layout?.objectPosition ? `object-position: ${layout.objectPosition};` : '';

const imgClass = `${className} ${modifier ? `${className}--${modifier}` : ''}`.trim();

const saiAttributes = sai
  ? {
      'data-sai': sai.styles,
      ...(sai.offset !== undefined && {
        'data-sai-offset': sai.offset.toString(),
      }),
      ...(sai.delay !== undefined && {
        'data-sai-delay': sai.delay.toString(),
      }),
      ...(sai.easing !== undefined && { 'data-sai-easing': sai.easing }),
      ...(sai.duration !== undefined && {
        'data-sai-duration': sai.duration.toString(),
      }),
      ...(sai.once !== undefined && { 'data-sai-once': sai.once.toString() }),
    }
  : {};
---

<img
  class={imgClass}
  src={img.src}
  loading={loading}
  alt={alt}
  width={width}
  height={height}
  {...saiAttributes}
  style={`${objectFitStyle} ${objectPositionStyle}`.trim()}
/>
<style lang='scss'>
  .image {
    display: block;
    height: auto;
    max-width: 100%;
  }
</style>
