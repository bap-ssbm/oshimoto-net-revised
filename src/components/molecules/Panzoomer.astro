---
import Img from '@/components/atoms/Img.astro';
import Pic from '@/components/molecules/Pic.astro';
import type { saiProps } from '@/types/CommonProps';
import type { ImageMetadata } from 'astro';

interface Props {
  src?: ImageMetadata;
  sp?: ImageMetadata;
  pc?: ImageMetadata;
  loading?: 'lazy' | 'eager';
  alt: string;
  zoomType?: 'pc' | 'sp' | 'both' | 'none';
  sai?: saiProps;
}

const { src, sp, pc, loading = 'lazy', alt, zoomType = 'both', sai } = Astro.props;

const isPic = sp && pc;

const saiAttributes = sai
  ? {
      'data-sai': sai.styles,
      ...(sai.offset !== undefined && {
        'data-sai-offset': sai.offset.toString(),
      }),
      ...(sai.delay !== undefined && {
        'data-sai-delay': sai.delay.toString(),
      }),
      ...(sai.easing !== undefined && { 'data-sai-easing': sai.easing }),
      ...(sai.duration !== undefined && {
        'data-sai-duration': sai.duration.toString(),
      }),
      ...(sai.once !== undefined && { 'data-sai-once': sai.once.toString() }),
    }
  : {};
---

<div class={`panzoomer${zoomType !== 'none' ? ' zoom-container' : ''}`} data-zoom-type={zoomType} {...saiAttributes}>
  {
    zoomType !== 'none' && (
      <div class='zoomControls'>
        <button class='zoomBtn zoomIn' aria-label='Zoom in'>
          <svg
            xmlns='http://www.w3.org/2000/svg'
            width='24'
            height='24'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
            stroke-linecap='round'
            stroke-linejoin='round'>
            <line x1='12' y1='5' x2='12' y2='19' />
            <line x1='5' y1='12' x2='19' y2='12' />
          </svg>
        </button>
        <button class='zoomBtn zoomOut' aria-label='Zoom out'>
          <svg
            xmlns='http://www.w3.org/2000/svg'
            width='24'
            height='24'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
            stroke-linecap='round'
            stroke-linejoin='round'>
            <line x1='5' y1='12' x2='19' y2='12' />
          </svg>
        </button>
      </div>
    )
  }
  <div class='imageWrapper'>
    {isPic ? <Pic sp={sp} pc={pc} loading={loading} alt={alt} /> : src && <Img src={src} loading={loading} alt={alt} />}
  </div>
</div>

<style lang='scss'>
  .panzoomer {
    position: relative;
    width: 100%;

    &.zoom-container {
      .imageWrapper {
        overflow: hidden;
        position: relative;
      }

      .zoomControls {
        display: flex;
        flex-direction: column;
        gap: 8px;
        position: absolute;
        right: 10px;
        top: 10px;
        z-index: 10;
      }

      .zoomBtn {
        align-items: center;
        background: white;
        border: 1px solid #2b883a;
        border-radius: 4px;
        color: #2b883a;
        cursor: pointer;
        display: flex;
        justify-content: center;
        padding: 8px;
        transition: background-color 0.2s;

        &:hover {
          background-color: #f0f0f0;
        }
      }
    }

    @media (max-width: 767px) {
      &[data-zoom-type='pc'] {
        .zoomControls {
          display: none;
        }
      }
    }

    @media (min-width: 768px) {
      &[data-zoom-type='sp'] {
        .zoomControls {
          display: none;
        }
      }
    }
  }
</style>

<script>
  import panzoom from '@panzoom/panzoom';

  class Panzoomer {
    constructor(container: Element) {
      const zoomType = container.getAttribute('data-zoom-type');
      const isMobile = window.innerWidth < 768;

      const shouldEnableZoom =
        zoomType === 'both' || (zoomType === 'pc' && !isMobile) || (zoomType === 'sp' && isMobile);

      if (!shouldEnableZoom) return;

      const imageWrapper = container.querySelector('.imageWrapper');
      const zoomInBtn = container.querySelector('.zoomIn');
      const zoomOutBtn = container.querySelector('.zoomOut');

      if (!imageWrapper) return;

      const panzoomInstance = panzoom(imageWrapper as HTMLElement, {
        maxScale: 5,
        minScale: 0.5,

        animate: true,
        duration: 200,
        easing: 'ease-out',
        contain: 'outside',
      });

      zoomInBtn?.addEventListener('click', () => {
        const currentScale = panzoomInstance.getScale();
        panzoomInstance.zoom(currentScale * 1.2);
      });

      zoomOutBtn?.addEventListener('click', () => {
        const currentScale = panzoomInstance.getScale();
        panzoomInstance.zoom(currentScale * 0.8);
      });

      const handleResize = () => {
        const newIsMobile = window.innerWidth < 768;
        const shouldNowEnableZoom =
          zoomType === 'both' || (zoomType === 'pc' && !newIsMobile) || (zoomType === 'sp' && newIsMobile);

        if (!shouldNowEnableZoom) {
          panzoomInstance.reset();
        }
      };

      window.addEventListener('resize', handleResize);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.zoom-container').forEach((container) => {
      new Panzoomer(container);
    });
  });
</script>
